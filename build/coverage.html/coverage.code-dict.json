{"/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/test.js":"/* istanbul instrument in package npmtest_browserify_transform_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/lib.npmtest_browserify_transform_tools.js":"/* istanbul instrument in package npmtest_browserify_transform_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify_transform_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify_transform_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify-transform-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify_transform_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify_transform_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify_transform_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browserify_transform_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify_transform_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browserify_transform_tools.__dirname + '/lib.npmtest_browserify_transform_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/node_modules/browserify-transform-tools/lib/transformTools.js":"// Generated by CoffeeScript 1.9.2\n(function() {\n  var clone, evaluateFunctionArgs, falafel, fs, isRootDir, loadConfig, merge, path, skipFile, through,\n    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\n  path = require('path');\n\n  fs = require('fs');\n\n  through = require('through');\n\n  falafel = require('falafel');\n\n  loadConfig = require('./loadConfig');\n\n  skipFile = require('./skipFile');\n\n  exports.loadTransformConfig = loadConfig.loadTransformConfig;\n\n  exports.loadTransformConfigSync = loadConfig.loadTransformConfigSync;\n\n  exports.skipFile = skipFile;\n\n  isRootDir = function(filename) {\n    return filename === path.resolve(filename, '/');\n  };\n\n  merge = function(a, b) {\n    var answer, key;\n    if (a == null) {\n      a = {};\n    }\n    if (b == null) {\n      b = {};\n    }\n    answer = {};\n    for (key in a) {\n      answer[key] = a[key];\n    }\n    for (key in b) {\n      answer[key] = b[key];\n    }\n    return answer;\n  };\n\n  clone = function(a) {\n    var answer, key;\n    if (!a) {\n      return a;\n    }\n    answer = {};\n    for (key in a) {\n      answer[key] = a[key];\n    }\n    return answer;\n  };\n\n  exports.makeStringTransform = function(transformName, options, transformFn) {\n    var transform;\n    if (options == null) {\n      options = {};\n    }\n    if (transformFn == null) {\n      transformFn = options;\n      options = {};\n    }\n    transform = function(file, config) {\n      var configData, content, end, ref, write;\n      configData = transform.configData != null ? transform.configData : loadConfig.loadTransformConfigSync(transformName, file, options);\n      if (config != null) {\n        configData = (ref = clone(configData)) != null ? ref : {\n          config: {}\n        };\n        configData.config = merge(configData.config, config);\n        if (configData.config.appliesTo) {\n          configData.appliesTo = configData.config.appliesTo;\n          delete configData.config.appliesTo;\n        }\n      }\n      if (skipFile(file, configData, options)) {\n        return through();\n      }\n      content = '';\n      write = function(buf) {\n        return content += buf;\n      };\n      end = function() {\n        var err, handleError, transformOptions;\n        handleError = (function(_this) {\n          return function(error) {\n            var suffix;\n            suffix = \" (while \" + transformName + \" was processing \" + file + \")\";\n            if (error instanceof Error && error.message) {\n              error.message += suffix;\n            } else {\n              error = new Error(\"\" + error + suffix);\n            }\n            return _this.emit('error', error);\n          };\n        })(this);\n        try {\n          transformOptions = {\n            file: file,\n            configData: configData,\n            config: configData != null ? configData.config : void 0,\n            opts: configData != null ? configData.config : void 0\n          };\n          return transformFn.call(this, content, transformOptions, (function(_this) {\n            return function(err, transformed) {\n              if (err) {\n                return handleError(err);\n              }\n              _this.queue(String(transformed));\n              return _this.queue(null);\n            };\n          })(this));\n        } catch (_error) {\n          err = _error;\n          return handleError(err);\n        }\n      };\n      return through(write, end);\n    };\n    transform.configure = function(config, configOptions) {\n      var answer;\n      if (configOptions == null) {\n        configOptions = {};\n      }\n      answer = exports.makeStringTransform(transformName, options, transformFn);\n      answer.setConfig(config, configOptions);\n      return answer;\n    };\n    transform.setConfig = function(config, configOptions) {\n      var configDir, configFile;\n      if (configOptions == null) {\n        configOptions = {};\n      }\n      configFile = configOptions.configFile || null;\n      configDir = configOptions.configDir || (configFile ? path.dirname(configFile) : null);\n      if (!config) {\n        this.configData = null;\n      } else {\n        this.configData = {\n          config: config,\n          configFile: configFile,\n          configDir: configDir,\n          cached: false\n        };\n        if (config.appliesTo) {\n          this.configData.appliesTo = config.appliesTo;\n          delete config.appliesTo;\n        }\n      }\n      return this;\n    };\n    return transform;\n  };\n\n  exports.makeFalafelTransform = function(transformName, options, transformFn) {\n    var falafelOptions, ref, transform;\n    if (options == null) {\n      options = {};\n    }\n    if (transformFn == null) {\n      transformFn = options;\n      options = {};\n    }\n    falafelOptions = (ref = options.falafelOptions) != null ? ref : {};\n    transform = exports.makeStringTransform(transformName, options, function(content, transformOptions, done) {\n      var pending, transformCb, transformErr, transformed;\n      transformErr = null;\n      pending = 1;\n      transformed = null;\n      transformCb = function(err) {\n        if (err && !transformErr) {\n          transformErr = err;\n          done(err);\n        }\n        if (transformErr) {\n          return;\n        }\n        pending--;\n        if (pending === 0) {\n          return done(null, transformed);\n        }\n      };\n      transformed = falafel(content, falafelOptions, function(node) {\n        var err;\n        pending++;\n        try {\n          return transformFn(node, transformOptions, transformCb);\n        } catch (_error) {\n          err = _error;\n          return transformCb(err);\n        }\n      });\n      return transformCb(transformErr, transformed);\n    });\n    transform.configure = function(config, configOptions) {\n      var answer;\n      if (configOptions == null) {\n        configOptions = {};\n      }\n      answer = exports.makeFalafelTransform(transformName, options, transformFn);\n      answer.setConfig(config, configOptions);\n      return answer;\n    };\n    return transform;\n  };\n\n  exports.makeRequireTransform = function(transformName, options, transformFn) {\n    var evaluateArguments, ref, transform;\n    if (options == null) {\n      options = {};\n    }\n    if (transformFn == null) {\n      transformFn = options;\n      options = {};\n    }\n    evaluateArguments = (ref = options.evaluateArguments) != null ? ref : true;\n    transform = exports.makeFalafelTransform(transformName, options, function(node, transformOptions, done) {\n      var args;\n      if (node.type === 'CallExpression' && node.callee.type === 'Identifier' && node.callee.name === 'require') {\n        args = evaluateFunctionArgs(evaluateArguments, transformOptions, node);\n        return transformFn(args.values(), transformOptions, function(err, transformed) {\n          if (err) {\n            return done(err);\n          }\n          if (transformed != null) {\n            node.update(transformed);\n          }\n          return done();\n        });\n      } else {\n        return done();\n      }\n    });\n    transform.configure = function(config, configOptions) {\n      var answer;\n      if (configOptions == null) {\n        configOptions = {};\n      }\n      answer = exports.makeRequireTransform(transformName, options, transformFn);\n      answer.setConfig(config, configOptions);\n      return answer;\n    };\n    return transform;\n  };\n\n  exports.makeFunctionTransform = function(transformName, options, transformFn) {\n    var evaluateArguments, functionNames, ref, transform;\n    if (options == null) {\n      options = {};\n    }\n    if (transformFn == null) {\n      transformFn = options;\n      options = {};\n    }\n    evaluateArguments = (ref = options.evaluateArguments) != null ? ref : true;\n    functionNames = [];\n    if (options.functionNames != null) {\n      if (Array.isArray(options.functionNames) || {}.toString.call(options.functionNames) === '[object Array]') {\n        functionNames = options.functionNames;\n      } else if (typeof options.functionNames === 'string') {\n        functionNames = [options.functionNames];\n      }\n    }\n    if (functionNames.length === 0) {\n      functionNames.push('require');\n    }\n    transform = exports.makeFalafelTransform(transformName, options, function(node, transformOptions, done) {\n      var args, ref1;\n      if (node.type === 'CallExpression' && node.callee.type === 'Identifier' && (ref1 = node.callee.name, indexOf.call(functionNames, ref1) >= 0)) {\n        args = evaluateFunctionArgs(evaluateArguments, transformOptions, node);\n        return transformFn({\n          name: node.callee.name,\n          args: args\n        }, transformOptions, function(err, transformed) {\n          if (err) {\n            return done(err);\n          }\n          if (transformed != null) {\n            node.update(transformed);\n          }\n          return done();\n        });\n      } else {\n        return done();\n      }\n    });\n    transform.configure = function(config, configOptions) {\n      var answer;\n      if (configOptions == null) {\n        configOptions = {};\n      }\n      answer = exports.makeFunctionTransform(transformName, options, transformFn);\n      answer.setConfig(config, configOptions);\n      return answer;\n    };\n    return transform;\n  };\n\n  exports.runTransform = function(transform, file, options, done) {\n    var doTransform;\n    if (options == null) {\n      options = {};\n    }\n    if (done == null) {\n      done = options;\n      options = {};\n    }\n    doTransform = function(content) {\n      var data, err, throughStream;\n      data = \"\";\n      err = null;\n      throughStream = options.config != null ? transform(file, options.config) : transform(file);\n      throughStream.on(\"data\", function(d) {\n        return data += d;\n      });\n      throughStream.on(\"end\", function() {\n        if (!err) {\n          return done(null, data);\n        }\n      });\n      throughStream.on(\"error\", function(e) {\n        err = e;\n        return done(err);\n      });\n      throughStream.write(content);\n      return throughStream.end();\n    };\n    if (options.content) {\n      return process.nextTick(function() {\n        return doTransform(options.content);\n      });\n    } else {\n      return fs.readFile(file, \"utf-8\", function(err, content) {\n        if (err) {\n          return done(err);\n        }\n        return doTransform(content);\n      });\n    }\n  };\n\n  evaluateFunctionArgs = function(evaluateArguments, transformOptions, node) {\n    var arg, args, dirname, varNames, vars;\n    if (evaluateArguments) {\n      dirname = path.dirname(transformOptions.file);\n      varNames = ['__filename', '__dirname', 'path', 'join'];\n      vars = [transformOptions.file, dirname, path, path.join];\n      args = node[\"arguments\"].map(function(arg) {\n        var err, t;\n        t = \"return \" + (arg.source());\n        try {\n          return {\n            value: Function(varNames, t).apply(null, vars),\n            type: arg.type\n          };\n        } catch (_error) {\n          err = _error;\n          return {\n            value: arg.source(),\n            type: arg.type\n          };\n        }\n      });\n    } else {\n      args = (function() {\n        var i, len, ref, results;\n        ref = node[\"arguments\"];\n        results = [];\n        for (i = 0, len = ref.length; i < len; i++) {\n          arg = ref[i];\n          results.push({\n            value: arg.source(),\n            type: arg.type\n          });\n        }\n        return results;\n      })();\n    }\n    args.values = function() {\n      var i, len, values;\n      values = [];\n      for (i = 0, len = this.length; i < len; i++) {\n        arg = this[i];\n        if (arg.value != null) {\n          values.push(arg.value);\n        }\n      }\n      return values;\n    };\n    return args;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/node_modules/browserify-transform-tools/lib/loadConfig.js":"// Generated by CoffeeScript 1.9.2\n(function() {\n  var configCache, findPackageJson, findPackageJsonSync, fs, getConfigFromCache, loadExternalConfig, loadJsonAsync, packageJsonCache, parentDir, path, processConfig, storeConfigInCache;\n\n  path = require('path');\n\n  fs = require('fs');\n\n  parentDir = require('./parentDir');\n\n  packageJsonCache = {};\n\n  findPackageJson = function(dirname, done) {\n    var answer;\n    answer = packageJsonCache[dirname];\n    if (answer) {\n      return process.nextTick(function() {\n        return done(null, answer);\n      });\n    } else {\n      return parentDir.parentDir(dirname, 'package.json', function(err, packageDir) {\n        var packageFile;\n        if (err) {\n          return done(err);\n        }\n        if (packageDir) {\n          packageFile = path.join(packageDir, 'package.json');\n        } else {\n          packageFile = null;\n        }\n        packageJsonCache[dirname] = packageFile;\n        return done(null, packageFile);\n      });\n    }\n  };\n\n  findPackageJsonSync = function(dirname) {\n    var answer, packageDir, packageFile;\n    answer = packageJsonCache[dirname];\n    if (!answer) {\n      packageDir = parentDir.parentDirSync(dirname, 'package.json');\n      if (packageDir) {\n        packageFile = path.join(packageDir, 'package.json');\n      } else {\n        packageFile = null;\n      }\n      packageJsonCache[dirname] = packageFile;\n      answer = packageFile;\n    }\n    return answer;\n  };\n\n  configCache = {};\n\n  getConfigFromCache = function(transformName, packageFile) {\n    var cacheKey;\n    cacheKey = transformName + \":\" + packageFile;\n    if (configCache[cacheKey] != null) {\n      return configCache[cacheKey];\n    } else {\n      return null;\n    }\n  };\n\n  storeConfigInCache = function(transformName, packageFile, configData) {\n    var cacheKey, cachedConfigData, key, value;\n    cacheKey = transformName + \":\" + packageFile;\n    cachedConfigData = {};\n    for (key in configData) {\n      value = configData[key];\n      cachedConfigData[key] = value;\n    }\n    cachedConfigData.cached = true;\n    return configCache[cacheKey] = cachedConfigData;\n  };\n\n  loadJsonAsync = function(filename, done) {\n    return fs.readFile(filename, \"utf-8\", function(err, content) {\n      if (err) {\n        return done(err);\n      }\n      try {\n        return done(null, JSON.parse(content));\n      } catch (_error) {\n        err = _error;\n        return done(err);\n      }\n    });\n  };\n\n  loadExternalConfig = function(packageFile, relativeConfigFile) {\n    var config, configDir, configFile, packageDir;\n    packageDir = path.dirname(packageFile);\n    configFile = path.resolve(packageDir, relativeConfigFile);\n    configDir = path.dirname(configFile);\n    config = require(configFile);\n    return {\n      config: config,\n      configDir: configDir,\n      configFile: configFile,\n      packageFile: packageFile,\n      cached: false\n    };\n  };\n\n  processConfig = function(transformName, packageFile, config) {\n    var configData, configDir, configFile;\n    if (typeof config === \"string\") {\n      configData = loadExternalConfig(packageFile, config);\n    } else {\n      configFile = packageFile;\n      configDir = path.dirname(packageFile);\n      configData = {\n        config: config,\n        configDir: configDir,\n        configFile: configFile,\n        packageFile: packageFile,\n        cached: false\n      };\n    }\n    if (configData.config.appliesTo) {\n      configData.appliesTo = configData.config.appliesTo;\n      delete configData.config.appliesTo;\n    }\n    storeConfigInCache(transformName, packageFile, configData);\n    return configData;\n  };\n\n  exports.loadTransformConfig = function(transformName, file, options, done) {\n    var dir, findConfig;\n    if (done == null) {\n      done = options;\n      options = {};\n    }\n    if (options.fromSourceFileDir) {\n      dir = path.dirname(file);\n    } else {\n      dir = process.cwd();\n    }\n    findConfig = function(dirname) {\n      return findPackageJson(dirname, function(err, packageFile) {\n        var configData;\n        if (err) {\n          return done(err);\n        }\n        if (packageFile == null) {\n          return done(null, null);\n        } else {\n          configData = getConfigFromCache(transformName, packageFile);\n          if (configData) {\n            return done(null, configData);\n          } else {\n            return loadJsonAsync(packageFile, function(err, pkg) {\n              var config, packageDir, parent;\n              if (err) {\n                return done(err);\n              }\n              config = pkg[transformName];\n              packageDir = path.dirname(packageFile);\n              if (config == null) {\n                if (!options.fromSourceFileDir) {\n                  return done(null, null);\n                } else {\n                  parent = path.resolve(packageDir, \"..\");\n                  if (parent === packageDir) {\n                    return done(null, null);\n                  } else {\n                    return findConfig(parent);\n                  }\n                }\n              } else {\n                try {\n                  configData = processConfig(transformName, packageFile, config);\n                  return done(null, configData);\n                } catch (_error) {\n                  err = _error;\n                  return done(err);\n                }\n              }\n            });\n          }\n        }\n      });\n    };\n    return findConfig(dir);\n  };\n\n  exports.loadTransformConfigSync = function(transformName, file, options) {\n    var config, configData, dirname, done, packageDir, packageFile, pkg;\n    if (options == null) {\n      options = {};\n    }\n    configData = null;\n    if (options.fromSourceFileDir) {\n      dirname = path.dirname(file);\n    } else {\n      dirname = process.cwd();\n    }\n    done = false;\n    while (!done) {\n      packageFile = findPackageJsonSync(dirname);\n      if (packageFile == null) {\n        configData = null;\n        done = true;\n      } else {\n        configData = getConfigFromCache(transformName, packageFile);\n        if (configData) {\n          done = true;\n        } else {\n          pkg = require(packageFile);\n          config = pkg[transformName];\n          packageDir = path.dirname(packageFile);\n          if (config == null) {\n            if (!options.fromSourceFileDir) {\n              done = true;\n            } else {\n              dirname = path.resolve(packageDir, \"..\");\n              if (dirname === packageDir) {\n                done = true;\n              }\n            }\n          } else {\n            configData = processConfig(transformName, packageFile, config);\n            done = true;\n          }\n        }\n      }\n    }\n    return configData;\n  };\n\n  exports.clearConfigCache = function() {\n    packageJsonCache = {};\n    return configCache = {};\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/node_modules/browserify-transform-tools/lib/parentDir.js":"// Generated by CoffeeScript 1.9.2\n(function() {\n  var fs, path;\n\n  path = require('path');\n\n  fs = require('fs');\n\n  exports.parentDir = function(dir, fileToFind, done) {\n    var exists, ref;\n    exists = (ref = fs.exists) != null ? ref : path.exists;\n    return exists(path.join(dir, fileToFind), function(fileExists) {\n      var parent;\n      if (fileExists) {\n        return done(null, dir);\n      } else {\n        parent = path.resolve(dir, \"..\");\n        if (parent === dir) {\n          return done(null, null);\n        } else {\n          return exports.parentDir(parent, fileToFind, done);\n        }\n      }\n    });\n  };\n\n  exports.parentDirSync = function(dir, fileToFind) {\n    var answer, dirToCheck, existsSync, oldDirToCheck, ref;\n    existsSync = (ref = fs.existsSync) != null ? ref : path.existsSync;\n    dirToCheck = path.resolve(dir);\n    answer = null;\n    while (true) {\n      if (existsSync(path.join(dirToCheck, fileToFind))) {\n        answer = dirToCheck;\n        break;\n      }\n      oldDirToCheck = dirToCheck;\n      dirToCheck = path.resolve(dirToCheck, \"..\");\n      if (oldDirToCheck === dirToCheck) {\n        break;\n      }\n    }\n    return answer;\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-browserify-transform-tools/node_modules/browserify-transform-tools/lib/skipFile.js":"// Generated by CoffeeScript 1.9.2\n(function() {\n  var JS_EXTENSIONS, endsWith, isArray, path;\n\n  path = require('path');\n\n  JS_EXTENSIONS = [\".js\", \".coffee\", \".coffee.md\", \".litcoffee\", \"._js\", \"._coffee\", \".jsx\", \".es\", \".es6\"];\n\n  isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  };\n\n  endsWith = function(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  };\n\n  module.exports = function(file, configData, options) {\n    var appliesTo, extension, fileToTest, i, includeExtensions, includeThisFile, j, k, l, len, len1, len2, len3, ref, ref1, regex, regexes, skip;\n    if (configData == null) {\n      configData = {};\n    }\n    if (options == null) {\n      options = {};\n    }\n    file = path.resolve(file);\n    skip = false;\n    appliesTo = configData.appliesTo;\n    if ((appliesTo == null) || ((appliesTo.includeExtensions == null) && (appliesTo.excludeExtensions == null) && (appliesTo.regex == null) && (appliesTo.files == null))) {\n      appliesTo = options;\n    }\n    includeExtensions = appliesTo != null ? appliesTo.includeExtensions : void 0;\n    if ((appliesTo != null ? appliesTo.jsFilesOnly : void 0) && !includeExtensions) {\n      includeExtensions = JS_EXTENSIONS;\n    }\n    if (appliesTo.regex != null) {\n      regexes = appliesTo.regex;\n      includeThisFile = false;\n      if (!isArray(regexes)) {\n        regexes = [regexes];\n      }\n      for (i = 0, len = regexes.length; i < len; i++) {\n        regex = regexes[i];\n        if (!regex.test) {\n          regex = new RegExp(regex);\n        }\n        if (regex.test(file)) {\n          includeThisFile = true;\n          break;\n        }\n      }\n      if (!includeThisFile) {\n        skip = true;\n      }\n    } else if (appliesTo.files != null) {\n      includeThisFile = false;\n      ref = appliesTo.files;\n      for (j = 0, len1 = ref.length; j < len1; j++) {\n        fileToTest = ref[j];\n        fileToTest = path.resolve(configData.configDir, fileToTest);\n        if (fileToTest === file) {\n          includeThisFile = true;\n          break;\n        }\n      }\n      if (!includeThisFile) {\n        skip = true;\n      }\n    } else if (appliesTo.excludeExtensions != null) {\n      ref1 = appliesTo.excludeExtensions;\n      for (k = 0, len2 = ref1.length; k < len2; k++) {\n        extension = ref1[k];\n        if (endsWith(file, extension)) {\n          skip = true;\n          break;\n        }\n      }\n    } else if (includeExtensions != null) {\n      includeThisFile = false;\n      for (l = 0, len3 = includeExtensions.length; l < len3; l++) {\n        extension = includeExtensions[l];\n        if (endsWith(file, extension)) {\n          includeThisFile = true;\n          break;\n        }\n      }\n      if (!includeThisFile) {\n        skip = true;\n      }\n    }\n    return skip;\n  };\n\n}).call(this);\n"}